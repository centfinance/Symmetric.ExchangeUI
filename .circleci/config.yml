# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  node: circleci/node@5.0.0
  aws-s3: circleci/aws-s3@3.0.0
  ms-teams: cloudradar-monitoring/ms-teams@0.0.1

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-deploy-celo:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:16.10
    steps:
      # Checkout the code as the first step.
        - checkout
        # Next, the node orb's install-packages step will install the dependencies from a package.json.
        # The orb install-packages step will also automatically cache them for faster future runs.
        - node/install-packages:
            # If you are using yarn, change the line below from "npm" to "yarn"
            pkg-manager: npm
            override-ci-command: npm install --force
        - run:
            name: Setting Env Variable
            command: |
              touch .env
              echo "APP_CHAIN_ID=$APP_CHAIN_ID_C
              APP_GAS_PRICE=$APP_GAS_PRICE
              APP_BUILD_NUMBER=$CIRCLE_BUILD_NUM" > .env
        - run:
            name: Setting appspec
            command: |
              touch appspec.yml
              echo "version: 0.0
              os: windows
              files:
                - source: .
                  destination: $APPSPEC_CELO_DESTINATION_C" > appspec.yml      
        - run:
            name: Run Build
            command: npm run build
        - run:
            name: Compress Artifacts
            command: zip -qr $CIRCLE_BRANCH-$CIRCLE_BUILD_NUM-$APP_NETWORK_CELO.zip ./dist appspec.yml
        - aws-s3/copy:
            from: $CIRCLE_BRANCH-$CIRCLE_BUILD_NUM-$APP_NETWORK_CELO.zip 
            to: $AWS_BUCKET_LOCATION 
        - run:    
            name: Iniitate Code-Deploy
            command: |
              if [[ $CIRCLE_BRANCH == "develop" ]]; then 
                echo "pushing to UAT..." 
                ID=$(aws deploy create-deployment \
                    --application-name $APP_NAME \
                    --deployment-config-name CodeDeployDefault.AllAtOnce \
                    --deployment-group-name $DEPLOYMENT_GROUP_U_X_C \
                    --s3-location bucket=symmetric-pools-ui-bucket,bundleType=zip,key=uat/$CIRCLE_BRANCH-$CIRCLE_BUILD_NUM-$APP_NETWORK_CELO.zip \
                    --description "Build triggered through CICD" \
                    --output text \
                    --query 'deploymentId')
                echo $ID      
                STATUS=$(aws deploy get-deployment --deployment-id $ID --output text --query 'deploymentInfo.status')
                echo "STATUS: $STATUS..."
                while [[ $STATUS == "Created" || $STATUS == "InProgress" || $STATUS == "Pending" || $STATUS == "Queued" || $STATUS == "Ready" ]]; do
                        echo "Status: $STATUS..."
                        STATUS=$(aws deploy get-deployment --deployment-id $ID --output text --query 'deploymentInfo.status')
                        sleep 5
                      done
                      if [[ $STATUS == "Succeeded" ]]; then
                        EXITCODE=0
                        echo "Deployment finished."
                      else
                        EXITCODE=1
                        echo "Deployment failed!"
                      fi
                      aws deploy get-deployment --deployment-id $ID
                      exit $EXITCODE
              else
                echo "pushing to feature..." 
                ID=$(aws deploy create-deployment \
                    --application-name $APP_NAME \
                    --deployment-config-name CodeDeployDefault.AllAtOnce \
                    --deployment-group-name $DEPLOYMENT_GROUP_XCHANGE_CELO \
                    --s3-location bucket=symmetric-pools-ui-bucket,bundleType=zip,key=uat/$CIRCLE_BRANCH-$CIRCLE_BUILD_NUM-$APP_NETWORK_CELO.zip \
                    --description "Build triggered through CICD" \
                    --output text \
                    --query 'deploymentId')
              echo $ID      
              STATUS=$(aws deploy get-deployment --deployment-id $ID --output text --query 'deploymentInfo.status')
              echo "STATUS: $STATUS..."
              while [[ $STATUS == "Created" || $STATUS == "InProgress" || $STATUS == "Pending" || $STATUS == "Queued" || $STATUS == "Ready" ]]; do
                      echo "Status: $STATUS..."
                      STATUS=$(aws deploy get-deployment --deployment-id $ID --output text --query 'deploymentInfo.status')
                      sleep 5
                    done
                    if [[ $STATUS == "Succeeded" ]]; then
                      EXITCODE=0
                      echo "Deployment finished."
                    else
                      EXITCODE=1
                      echo "Deployment failed!"
                    fi
                    aws deploy get-deployment --deployment-id $ID
                    exit $EXITCODE
              fi
                    aws deploy get-deployment --deployment-id $ID
                    exit $EXITCODE
        - ms-teams/report:
            only_on_fail: false
            webhook_url: $TEAMS_WEBHOOK
  build-and-deploy-xdai:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:16.10
    steps:
      # Checkout the code as the first step.
        - checkout
        # Next, the node orb's install-packages step will install the dependencies from a package.json.
        # The orb install-packages step will also automatically cache them for faster future runs.
        - node/install-packages:
            # If you are using yarn, change the line below from "npm" to "yarn"
            pkg-manager: npm
            override-ci-command: npm install --force
        - run:
            name: Setting Env Variable
            command: |
              touch .env
              echo "APP_CHAIN_ID=$APP_CHAIN_ID_X
              APP_GAS_PRICE=$APP_GAS_PRICE
              APP_BUILD_NUMBER=$CIRCLE_BUILD_NUM" > .env
        - run:
            name: Setting appspec
            command: |
              touch appspec.yml
              echo "version: 0.0
              os: windows
              files:
                - source: .
                  destination: $APPSPEC_XDAI_DESTINATION_X" > appspec.yml      
        - run:
            name: Run Build
            command: npm run build
        - run:
            name: Compress Artifacts
            command: zip -qr $CIRCLE_BRANCH-$CIRCLE_BUILD_NUM-$APP_NETWORK_XDAI.zip ./dist appspec.yml
        - aws-s3/copy:
            from: $CIRCLE_BRANCH-$CIRCLE_BUILD_NUM-$APP_NETWORK_XDAI.zip
            to: $AWS_BUCKET_LOCATION 
        - run:    
            name: Iniitate Code-Deploy
            command: |
              if [[ $CIRCLE_BRANCH == "develop" ]]; then 
                echo "pushing to UAT..." 
                ID=$(aws deploy create-deployment \
                    --application-name $APP_NAME \
                    --deployment-config-name CodeDeployDefault.AllAtOnce \
                    --deployment-group-name $DEPLOYMENT_GROUP_U_XCHANGE_XDAI \
                    --s3-location bucket=symmetric-pools-ui-bucket,bundleType=zip,key=uat/$CIRCLE_BRANCH-$CIRCLE_BUILD_NUM-$APP_NETWORK_XDAI.zip \
                    --description "Build triggered through CICD" \
                    --output text \
                    --query 'deploymentId')
                echo $ID      
                STATUS=$(aws deploy get-deployment --deployment-id $ID --output text --query 'deploymentInfo.status')
                echo "STATUS: $STATUS..."
                while [[ $STATUS == "Created" || $STATUS == "InProgress" || $STATUS == "Pending" || $STATUS == "Queued" || $STATUS == "Ready" ]]; do
                        echo "Status: $STATUS..."
                        STATUS=$(aws deploy get-deployment --deployment-id $ID --output text --query 'deploymentInfo.status')
                        sleep 5
                      done
                      if [[ $STATUS == "Succeeded" ]]; then
                        EXITCODE=0
                        echo "Deployment finished."
                      else
                        EXITCODE=1
                        echo "Deployment failed!"
                      fi
                      aws deploy get-deployment --deployment-id $ID
                      exit $EXITCODE
              else
                ID=$(aws deploy create-deployment \
                    --application-name $APP_NAME \
                    --deployment-config-name CodeDeployDefault.AllAtOnce \
                    --deployment-group-name $DEPLOYMENT_GROUP_XCHANGE_XDAI \
                    --s3-location bucket=symmetric-pools-ui-bucket,bundleType=zip,key=uat/$CIRCLE_BRANCH-$CIRCLE_BUILD_NUM-$APP_NETWORK_XDAI.zip \
                    --description "Build triggered through CICD" \
                    --output text \
                    --query 'deploymentId')
              echo $ID      
              STATUS=$(aws deploy get-deployment --deployment-id $ID --output text --query 'deploymentInfo.status')
              echo "STATUS: $STATUS..."
              while [[ $STATUS == "Created" || $STATUS == "InProgress" || $STATUS == "Pending" || $STATUS == "Queued" || $STATUS == "Ready" ]]; do
                      echo "Status: $STATUS..."
                      STATUS=$(aws deploy get-deployment --deployment-id $ID --output text --query 'deploymentInfo.status')
                      sleep 5
                    done
                    if [[ $STATUS == "Succeeded" ]]; then
                      EXITCODE=0
                      echo "Deployment finished."
                    else
                      EXITCODE=1
                      echo "Deployment failed!"
                    fi
                    aws deploy get-deployment --deployment-id $ID
                    exit $EXITCODE
              fi
        - ms-teams/report:
            only_on_fail: false
            webhook_url: $TEAMS_WEBHOOK

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  Build-and-Deploy:
    jobs:
      - build-and-deploy-celo:
          context:
              - AWS
      - build-and-deploy-xdai:
          context:
            - AWS
          requires:
           - build-and-deploy-celo